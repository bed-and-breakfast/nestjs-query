"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[5646],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=o,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||a;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3314:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7294),o=n(6010);const a={tabItem:"tabItem_Ymn6"};function i(e){var t=e.children,n=e.hidden,i=e.className;return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(a.tabItem,i),hidden:n},t)}},1291:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(7462),o=n(7294),a=n(6010),i=n(2389),l=n(7392),s=n(7094),p=n(2466);const d={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function u(e){var t,n,i=e.lazy,u=e.block,m=e.defaultValue,c=e.values,h=e.groupId,k=e.className,f=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=c?c:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,l.l)(y,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===m?m:null!=(t=null!=m?m:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:f[0].props.value;if(null!==b&&!y.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var T=(0,s.U)(),g=T.tabGroupChoices,N=T.setTabGroupChoices,I=(0,o.useState)(b),w=I[0],j=I[1],C=[],D=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var O=g[h];null!=O&&O!==w&&y.some((function(e){return e.value===O}))&&j(O)}var q=function(e){var t=e.currentTarget,n=C.indexOf(t),r=y[n].value;r!==w&&(D(t),j(r),null!=h&&N(h,String(r)))},R=function(e){var t,n=null;switch(e.key){case"Enter":q(e);break;case"ArrowRight":var r,o=C.indexOf(e.currentTarget)+1;n=null!=(r=C[o])?r:C[0];break;case"ArrowLeft":var a,i=C.indexOf(e.currentTarget)-1;n=null!=(a=C[i])?a:C[C.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,a.Z)("tabs-container",d.tabList)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":u},k)},y.map((function(e){var t=e.value,n=e.label,i=e.attributes;return o.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:function(e){return C.push(e)},onKeyDown:R,onClick:q},i,{className:(0,a.Z)("tabs__item",d.tabItem,null==i?void 0:i.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),i?(0,o.cloneElement)(f.filter((function(e){return e.props.value===w}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},f.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}function m(e){var t=(0,i.Z)();return o.createElement(u,(0,r.Z)({key:String(t)},e))}},7135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>f,frontMatter:()=>p,metadata:()=>u,toc:()=>c});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=n(1291),l=n(3314),s=["components"],p={title:"Federation"},d=void 0,u={unversionedId:"graphql/federation",id:"graphql/federation",title:"Federation",description:"nestjs-query provides basic federation support, with the intention of helping to",source:"@site/docs/graphql/federation.mdx",sourceDirName:"graphql",slug:"/graphql/federation",permalink:"/nestjs-query/docs/graphql/federation",draft:!1,editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/graphql/federation.mdx",tags:[],version:"current",frontMatter:{title:"Federation"},sidebar:"docs",previous:{title:"Types",permalink:"/nestjs-query/docs/graphql/types"},next:{title:"Query Helpers",permalink:"/nestjs-query/docs/utilities/query-helpers"}},m={},c=[{value:"Base Type",id:"base-type",level:2},{value:"Base Type",id:"base-type-1",level:3},{value:"Auto Generated Resolver",id:"auto-generated-resolver",level:3},{value:"Manual Resolver",id:"manual-resolver",level:3},{value:"App Module",id:"app-module",level:3},{value:"Reference Base Type",id:"reference-base-type",level:2},{value:"@Reference Decorator",id:"reference-decorator",level:3},{value:"Resolver",id:"resolver",level:3},{value:"Federated Relations",id:"federated-relations",level:2},{value:"RelationQueryService",id:"relationqueryservice",level:3},{value:"Add the Connection",id:"add-the-connection",level:3},{value:"Federation Resolver",id:"federation-resolver",level:3},{value:"Complete Example",id:"complete-example",level:2}],h={toc:c},k="wrapper";function f(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)(k,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"nestjs-query")," provides ",(0,a.kt)("strong",{parentName:"p"},"basic")," federation support, with the intention of helping to"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Plug into existing federated graphs, through references."),(0,a.kt)("li",{parentName:"ul"},"Create a federated relations/connections on types defined in other services.")),(0,a.kt)("p",null,"These docs assume you have read"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/graphql/federation"},"https://docs.nestjs.com/graphql/federation")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.apollographql.com/docs/apollo-server/federation/introduction/"},"https://www.apollographql.com/docs/apollo-server/federation/introduction/"))),(0,a.kt)("h2",{id:"base-type"},"Base Type"),(0,a.kt)("p",null,"The simplest way to integrate with a federated graph is through references."),(0,a.kt)("p",null,"A reference is an object that looks like"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{ __typename: 'TodoItem', id: subTask.todoItemId }\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"__typename")," lets the gateway know which type is being referenced with additional fields that can be used to uniquely identify the type."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Both of the examples below add a ",(0,a.kt)("inlineCode",{parentName:"p"},"resolveReference")," function see ",(0,a.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/federation/entities/#resolving"},"https://www.apollographql.com/docs/apollo-server/federation/entities/#resolving"))),(0,a.kt)("p",null,"To reference a type in ",(0,a.kt)("inlineCode",{parentName:"p"},"nestjs-query")," you must first create DTO that defines the base type."),(0,a.kt)("h3",{id:"base-type-1"},"Base Type"),(0,a.kt)("p",null,"The base type in its own service must be decorated with federated directives specifying its key."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts"',title:'"todo-item/todo-item.dto.ts"'},"import { FilterableField } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Directive } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\n@Directive('@key(fields: \"id\")')\nexport class TodoItemDTO {\n  @FilterableField(() => ID)\n  id!: number;\n  ...\n}\n")),(0,a.kt)("h3",{id:"auto-generated-resolver"},"Auto Generated Resolver"),(0,a.kt)("p",null,"When using the ",(0,a.kt)("inlineCode",{parentName:"p"},"NestjsQueryGraphQLModule")," module add the ",(0,a.kt)("inlineCode",{parentName:"p"},"referenceBy")," option that ",(0,a.kt)("inlineCode",{parentName:"p"},"nestjs-query")," will use to automatically expose add a ",(0,a.kt)("inlineCode",{parentName:"p"},"@ResolveReference")," decorator and method that the gateway can use."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.module.ts" {14-15}',title:'"todo-item/todo-item.module.ts"',"{14-15}":!0},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [ /* import the nestjs-query persistence module*/],\n      resolvers: [\n        {\n          DTOClass: TodoItemDTO,\n          EntityClass: TodoItemEntity,\n          // specify the referenceBy option letting nestjs-query know to to resolve a reference\n          referenceBy: { key: 'id' },\n        },\n      ],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"referenceBy.key")," should be the field you want to look up the DTO by.")),(0,a.kt)("h3",{id:"manual-resolver"},"Manual Resolver"),(0,a.kt)("p",null,"If you want to manually define your resolver pass in the ",(0,a.kt)("inlineCode",{parentName:"p"},"referenceBy")," option to the ",(0,a.kt)("inlineCode",{parentName:"p"},"CRUDResolver"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.resolver.ts" {3-4}',title:'"todo-item.resolver.ts"',"{3-4}":!0},"@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  // specify the referenceBy option letting nestjs-query know to to resolve a reference\n  referenceBy: { key: 'id' },\n}) {\n  constructor(@InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>) {\n    super(service);\n  }\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"referenceBy.key")," should be the field you want to look up the DTO by.")),(0,a.kt)("h3",{id:"app-module"},"App Module"),(0,a.kt)("p",null,"This app module ",(0,a.kt)("strong",{parentName:"p"},"must")," also use the ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLFederationModule")," in order for the base type to be resolved by the gateway."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app.module.ts"',title:'"app.module.ts"'},"import { GraphQLFederationModule } from '@nestjs/graphql';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(ormconfig as TypeOrmModuleOptions),\n    GraphQLFederationModule.forRoot({\n      autoSchemaFile: 'schema.gql',\n    }),\n    TodoItemModule,\n  ],\n})\nexport class AppModule {}\n")),(0,a.kt)("h2",{id:"reference-base-type"},"Reference Base Type"),(0,a.kt)("p",null,"In a separate service from the one defining the base type above, we can use Apollo Federation to extend that base type."),(0,a.kt)("p",null,"To do this with ",(0,a.kt)("inlineCode",{parentName:"p"},"nestjs-query")," you must create a type that extends the base type contained in some other graphql service."),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"The type name must be the same name as the type it extends in the graph.")),(0,a.kt)("p",null,"For example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/todo-item-reference.dto.ts" {4-5}',title:'"sub-task/todo-item-reference.dto.ts"',"{4-5}":!0},"import { ObjectType, Directive, Field, ID } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\n@Directive('@extends')\n@Directive('@key(fields: \"id\")')\nexport class TodoItemReferenceDTO {\n  @Field(() => ID)\n  @Directive('@external')\n  id!: number;\n}\n\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Notice how the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Directive")," decorator is used to add the ",(0,a.kt)("inlineCode",{parentName:"p"},"@extends")," annotation along with the ",(0,a.kt)("inlineCode",{parentName:"p"},"@keys"),"."),(0,a.kt)("p",{parentName:"admonition"},"To read more about ",(0,a.kt)("inlineCode",{parentName:"p"},"@extends")," annotation see ",(0,a.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/federation/entities/#extending"},"https://www.apollographql.com/docs/apollo-server/federation/entities/#extending"))),(0,a.kt)("h3",{id:"reference-decorator"},"@Reference Decorator"),(0,a.kt)("p",null,"To reference a type defined in another service you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Reference")," decorator."),(0,a.kt)("p",null,"When using the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Reference")," decorator ",(0,a.kt)("inlineCode",{parentName:"p"},"nestjs-query")," will ",(0,a.kt)("strong",{parentName:"p"},"NOT")," look up the relation through the ",(0,a.kt)("inlineCode",{parentName:"p"},"QueryService"),", instead return a reference type like the one described above."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/sub-task.dto.ts" {5-6}',title:'"sub-task/sub-task.dto.ts"',"{5-6}":!0},"import { FilterableField, Reference } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\n\n@ObjectType('SubTask')\n// add a todoItem reference and use the subTask.todoItemId as the id\n@Reference('todoItem', () => TodoItemReferenceDTO, { id: 'todoItemId' })\nexport class SubTaskDTO {\n  @FilterableField(() => ID)\n  id!: number;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ nullable: true })\n  description?: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n\n  @FilterableField()\n  todoItemId!: string;\n}\n")),(0,a.kt)("p",null,"In the above example we provided the keys which look like the following"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{ id: 'todoItemId' }\n")),(0,a.kt)("p",null,"Which will map the ",(0,a.kt)("inlineCode",{parentName:"p"},"SubTask.todoItemId")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," field in the reference type."),(0,a.kt)("p",null,"Assuming you have the following ",(0,a.kt)("inlineCode",{parentName:"p"},"SubTask")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{id: 1, title: 'Sub Task 1', completed: false, todoItemId: 2}\n")),(0,a.kt)("p",null,"The reference type would be"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{ __typename: 'TodoItem', id: 2 }\n")),(0,a.kt)("h3",{id:"resolver"},"Resolver"),(0,a.kt)("p",null,"Now that we have added the decorator the ",(0,a.kt)("inlineCode",{parentName:"p"},"nestjs-query")," resolver will automatically add the reference to the graphql type when using ",(0,a.kt)("inlineCode",{parentName:"p"},"NestjsQueryGraphQLModule")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"CRUDResolver")),(0,a.kt)(i.Z,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"module",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/sub-task.module.ts"',title:'"sub-task/sub-task.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { Module } from '@nestjs/common';\nimport { SubTaskDTO } from './dto/sub-task.dto';\nimport { SubTaskEntity } from './sub-task.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [ /* import the nestjs-query persistence module*/],\n      resolvers: [{ DTOClass: SubTaskDTO, EntityClass: SubTaskEntity }],\n    }),\n  ],\n})\nexport class SubTaskModule {}\n"))),(0,a.kt)(l.Z,{value:"resolver",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/sub-task.resolver.ts"',title:'"sub-task/sub-task.resolver.ts"'},"import { QueryService, InjectQueryService } from '@ptc-org/nestjs-query-core';\nimport { CRUDResolver } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { SubTaskDTO } from './sub-task.dto';\nimport { TodoItemReferenceDTO } from './dto/todo-item-reference.dto';\nimport { SubTaskEntity } from './sub-task.entity';\n\n@Resolver(() => SubTaskDTO)\nexport class SubTaskResolver extends CRUDResolver(SubTaskDTO) {\n  constructor(@InjectQueryService(SubTaskEntity) readonly service: QueryService<SubTaskEntity>) {\n    super(service);\n  }\n}\n")))),(0,a.kt)("h2",{id:"federated-relations"},"Federated Relations"),(0,a.kt)("p",null,"Another common use case is to add ",(0,a.kt)("inlineCode",{parentName:"p"},"relations")," to a federated type from another service."),(0,a.kt)("p",null,"Lets continue with the ",(0,a.kt)("inlineCode",{parentName:"p"},"SubTask")," example used above. We have add a ",(0,a.kt)("inlineCode",{parentName:"p"},"todoItem")," reference to the ",(0,a.kt)("inlineCode",{parentName:"p"},"SubTask")," but now lets add subTasks to the ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItem"),"."),(0,a.kt)("h3",{id:"relationqueryservice"},"RelationQueryService"),(0,a.kt)("p",null,"The first step is to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"RelationQueryService"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"RelationQueryService")," is a special type of ",(0,a.kt)("inlineCode",{parentName:"p"},"QueryService")," that allows looking up relations without defining them in your entity."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.service.ts"',title:'"todo-item.service.ts"'},"import { InjectQueryService, QueryService, RelationQueryService } from '@ptc-org/nestjs-query-core';\nimport { TodoItemReferenceDTO } from './todo-item-reference.dto';\nimport { SubTaskEntity } from './sub-task.entity';\n\n@QueryService(TodoItemReferenceDTO)\nexport class TodoItemService extends RelationQueryService<TodoItemReferenceDTO> {\n  constructor(@InjectQueryService(SubTaskEntity) readonly subTaskService: QueryService<SubTaskEntity>) {\n    super({\n      // the name of the relation\n      subTasks: {\n        service: subTaskService,\n        // a query factory that will take in the reference to create a query.\n        query: (todoItemReferenceDTO) => ({ filter: { todoItemId: { eq: todoItemReferenceDTO.id } } }),\n      },\n    });\n  }\n}\n\n")),(0,a.kt)("p",null,"In this example we inject a ",(0,a.kt)("inlineCode",{parentName:"p"},"SubTask")," service that will be used to look up ",(0,a.kt)("inlineCode",{parentName:"p"},"subTask")," relations. The ",(0,a.kt)("inlineCode",{parentName:"p"},"query")," method is used to filter relations when ",(0,a.kt)("inlineCode",{parentName:"p"},"findRelation")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"queryRelations")," is called."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  // the name of the relation\n  subTasks: {\n    // the service to delegate to when looking up the relations\n    service: subTaskService,\n    // a query factory that will take in the reference to create a query.\n    query: (todoItemReferenceDTO) => ({ filter: { todoItemId: { eq: todoItemReferenceDTO.id } } }),\n  },\n}\n")),(0,a.kt)("h3",{id:"add-the-connection"},"Add the Connection"),(0,a.kt)("p",null,"Next we add the ",(0,a.kt)("inlineCode",{parentName:"p"},"subTasks")," connection to the ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItemReferenceDTO"),"."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The name of the relation should match the name of the relation defined by your ",(0,a.kt)("inlineCode",{parentName:"p"},"RelationQueryService"),".")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The same pattern applies when you have a single relation and use the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Relation")," decorator.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='sub-task/todo-item-reference.dto.ts'",title:"'sub-task/todo-item-reference.dto.ts'"},"import { Connection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, Directive, Field, ID } from '@nestjs/graphql';\nimport { SubTaskDTO } from './sub-task.dto';\n\n@ObjectType('TodoItem')\n@Directive('@extends')\n@Directive('@key(fields: \"id\")')\n@CursorConnection('subTasks', () => SubTaskDTO)\nexport class TodoItemReferenceDTO {\n  @Field(() => ID)\n  @Directive('@external')\n  id!: number;\n}\n\n")),(0,a.kt)("h3",{id:"federation-resolver"},"Federation Resolver"),(0,a.kt)("p",null,"Next we set up our resolver that exposes the relations in the schema. As with other resolvers you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"NestjsQueryGraphQLModule")," or define your own ",(0,a.kt)("inlineCode",{parentName:"p"},"FederationResolver"),"."),(0,a.kt)(i.Z,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"FederationResolver",value:"resolver"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"module",mdxType:"TabItem"},(0,a.kt)("p",null,"When using the ",(0,a.kt)("inlineCode",{parentName:"p"},"NestjsQueryGraphQLModule")," set the ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," of the resolver to ",(0,a.kt)("inlineCode",{parentName:"p"},"federated"),", and specify the ",(0,a.kt)("inlineCode",{parentName:"p"},"Service"),"."),(0,a.kt)("p",null,"Also, add the ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItemService")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"services")," option to make it available for nest to inject the service into the auto-generated resolver."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/sub-task.module.ts" {12,18-22}',title:'"sub-task/sub-task.module.ts"',"{12,18-22}":!0},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { Module } from '@nestjs/common';\nimport { SubTaskDTO } from './dto/sub-task.dto';\nimport { SubTaskEntity } from './sub-task.entity';\nimport { TodoItemReferenceDTO } from './dto/todo-item-reference.dto';\nimport { TodoItemService } from './todo-item.service';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [/* import the nestjs-query persistence module*/],\n      services: [TodoItemService],\n      resolvers: [\n        {\n          DTOClass: SubTaskDTO,\n          EntityClass: SubTaskEntity,\n        },\n        {\n          type: 'federated',\n          DTOClass: TodoItemReferenceDTO,\n          Service: TodoItemService,\n        },\n      ],\n    }),\n  ],\n})\nexport class SubTaskModule {}\n\n"))),(0,a.kt)(l.Z,{value:"resolver",mdxType:"TabItem"},(0,a.kt)("p",null,"When manually defining the resolver extend the ",(0,a.kt)("inlineCode",{parentName:"p"},"FederationResolver"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"FederationResolver")," this will not set up any queries or mutations in the graph. Instead, it is used set up the reading of relations for a type that originates from another service."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/todo-item.resolver.ts"',title:'"sub-task/todo-item.resolver.ts"'},"import { FederationResolver } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemReferenceDTO } from './todo-item-reference.dto';\nimport { TodoItemService } from './todo-item.service';\n\n@Resolver(() => TodoItemReferenceDTO)\nexport class TodoItemResolver extends FederationResolver(TodoItemReferenceDTO) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n")))),(0,a.kt)("h2",{id:"complete-example"},"Complete Example"),(0,a.kt)("p",null,"To see a complete example checkout ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tripss/nestjs-query/tree/master/examples/federation"},"https://github.com/tripss/nestjs-query/tree/master/examples/federation")))}f.isMDXComponent=!0}}]);